/*
* Copyright (C) the libgit2 contributors. All rights reserved.
*
* This file is part of libgit2, distributed under the GNU GPL v2 with
* a Linking Exception. For full terms see the included COPYING file.
*/
package odit

import "core:c"

_ :: c



// INCLUDE_git_errors_h__ :: 

/** Generic return codes */
git_error_code :: enum c.int {
	/**
	* No error occurred; the call was successful.
	*/
	OK = 0,

	/**
	* An error occurred; call `git_error_last` for more information.
	*/
	ERROR = -1,
	ENOTFOUND       = -3,  /**< Requested object could not be found. */
	EEXISTS         = -4,  /**< Object exists preventing operation. */
	EAMBIGUOUS      = -5,  /**< More than one object matches. */
	EBUFS           = -6,  /**< Output buffer too short to hold data. */

	/**
	* GIT_EUSER is a special error that is never generated by libgit2
	* code.  You can return it from a callback (e.g to stop an iteration)
	* to know that it was generated by the callback and not by libgit2.
	*/
	EUSER = -7,
	EBAREREPO       = -8,  /**< Operation not allowed on bare repository. */
	EUNBORNBRANCH   = -9,  /**< HEAD refers to branch with no commits. */
	EUNMERGED       = -10, /**< Merge in progress prevented operation */
	ENONFASTFORWARD = -11, /**< Reference was not fast-forwardable */
	EINVALIDSPEC    = -12, /**< Name/ref spec was not in a valid format */
	ECONFLICT       = -13, /**< Checkout conflicts prevented operation */
	ELOCKED         = -14, /**< Lock file prevented operation */
	EMODIFIED       = -15, /**< Reference value does not match expected */
	EAUTH           = -16, /**< Authentication error */
	ECERTIFICATE    = -17, /**< Server certificate is invalid */
	EAPPLIED        = -18, /**< Patch/merge has already been applied */
	EPEEL           = -19, /**< The requested peel operation is not possible */
	EEOF            = -20, /**< Unexpected EOF */
	EINVALID        = -21, /**< Invalid operation or input */
	EUNCOMMITTED    = -22, /**< Uncommitted changes in index prevented operation */
	EDIRECTORY      = -23, /**< The operation is not valid for a directory */
	EMERGECONFLICT  = -24, /**< A merge conflict exists and cannot continue */
	PASSTHROUGH     = -30, /**< A user-configured callback refused to act */
	ITEROVER        = -31, /**< Signals end of iteration with iterator */
	RETRY           = -32, /**< Internal only */
	EMISMATCH       = -33, /**< Hashsum mismatch in object */
	EINDEXDIRTY     = -34, /**< Unsaved changes in the index would be overwritten */
	EAPPLYFAIL      = -35, /**< Patch application failed */
	EOWNER          = -36, /**< The object is not owned by the current user */
	TIMEOUT         = -37, /**< The operation timed out */
	EUNCHANGED      = -38, /**< There were no changes */
	ENOTSUPPORTED   = -39, /**< An option is not supported */
	EREADONLY       = -40, /**< The subject is read-only */
}

/**
* Error classes are the category of error. They reflect the area of the
* code where an error occurred.
*/
git_error_t :: enum c.uint {
	NONE,
	NOMEMORY,
	OS,
	INVALID,
	REFERENCE,
	ZLIB,
	REPOSITORY,
	CONFIG,
	REGEX,
	ODB,
	INDEX,
	OBJECT,
	NET,
	TAG,
	TREE,
	INDEXER,
	SSL,
	SUBMODULE,
	THREAD,
	STASH,
	CHECKOUT,
	FETCHHEAD,
	MERGE,
	SSH,
	FILTER,
	REVERT,
	CALLBACK,
	CHERRYPICK,
	DESCRIBE,
	REBASE,
	FILESYSTEM,
	PATCH,
	WORKTREE,
	SHA,
	HTTP,
	INTERNAL,
	GRAFTS,
}

/**
* Structure to store extra details of the last error that occurred.
*
* This is kept on a per-thread basis if GIT_THREADS was defined when the
* library was build, otherwise one is kept globally for the library
*/
git_error :: struct {
	message: cstring, /**< The error message for the last error. */
	klass:   c.int,   /**< The category of the last error. @type git_error_t */
}

@(default_calling_convention="c", link_prefix="")
foreign lib {
	/**
	* Return the last `git_error` object that was generated for the
	* current thread.
	*
	* This function will never return NULL.
	*
	* Callers should not rely on this to determine whether an error has
	* occurred. For error checking, callers should examine the return
	* codes of libgit2 functions.
	*
	* This call can only reliably report error messages when an error
	* has occurred. (It may contain stale information if it is called
	* after a different function that succeeds.)
	*
	* The memory for this object is managed by libgit2. It should not
	* be freed.
	*
	* @return A pointer to a `git_error` object that describes the error.
	*/
	git_error_last :: proc() -> ^git_error ---
}
